---
layout: post
title: "重构和重用"
date: 2018-06-30 22:11:21
categories: 软件工程
tags: Software_Engineering
---

> 软件重构穿插在软件的整个周期中，代码重用则是在重构的基础上对已有代码改造
后再度使用或直接引用，目的在于缩短开发周期，减轻测试负担和减小出错的几率，同时有助于
将重心放在问题本身而非代码细节，提高开发效率，也有可能提升代码质量和减少维护
成本。实际上代码重用可以在不同项目中进行，也可以在同一个项目中进行。总之，
重构和重用无处不在，重构是重用的基础，重用是重构的动力。




* 目录
{:toc}

# 题外话

好久没有写博客了，一来研究生毕业期间要写论文以及还有很多与论文相关的事情要做，二来六月份
还在考驾照，三来科研团队还要我在 20 天内用 MATLAB 开发一个某领域的仿真和数值计算
软件……。说好的毕业旅行呢？说好的各种嗨呢？结果统统与我无关！只能把开发这个软件
当做毕业旅行了。之前没有用 MATLAB 开发过软件，对 MATLAB 不熟悉，这么短的时间内用
一门不熟悉的语言开发一个较为复杂的软件（当然要满足性能要求），周围的人都劝我：这
任务几乎不可能完成（这种事情我可没少干），这明显在坑人，能推脱就推脱，能拖延就拖
延……。但这都不符合我的理念，同时为了能顺利毕业也得拼了！由于对 MATLAB 不熟，所
以无法预期开发周期长短，只能摸着石头过河，不过在这种情形下，良好的软件工程和系统
分析知识（哎，这些看似很虚的东西，可是我每时每刻使用的东西，也是最有用的东西之一）
给了我很大的帮助。为了提高沟通效率，采用的是快速原型迭代和测试驱动开发：快速原型是
为了试探和逐步确认需求，迭代则是先抓核心再周边，测试驱动则是分块验证并逐步集成
（毕竟不熟悉该语言）。

后面遇到了以下几个棘手的问题：MATLAB 原生不支持多线程、MATLAB 面向对象机制有缺陷
（存在大量的数据拷贝，在数百万级矩阵的大量拷贝时间是相当可观）。更要命的是这两个
问题对该软件项目都有致命的影响：第一个问题导致软件界面响应迟钝，当程序在后台计算
时，界面无法及时响应操作，也无法中断程序；第二个问题导致程序运行偏慢。这是语言本
身的缺陷，很难克服，只能更改设计，好在需求划分得比较细，模块划分得较好，各模块接
口设计较为合理，所以在即使在更改设计时，这些只需要简单的修改就可以作为零部件使用，
减轻了测试工作量。由于良好的功能模块划分和接口设计，软件重新设计变得相对容易。

+ 解决第一个问题时

采用了界面响应与计算响应分离的设计，主界面只是启动计算，启动之后托管，这样该界面
还可以进行与该计算无关的相关操作，然后跳出另一个独立窗口专门用于控制计算，同时可
以传递信息至主界面，从而实现两界面的协同。

+ 解决第二个问题时

大量采用矩阵运算而非循环，同时减少函数间的数据传递，使大量数据尽量在函数内部使用
（这实际上是面向对象核心理念在函数粒度中的应用），从而充分利用了 MATLAB 矩阵并行
计算的优势，提高了运算速率。本来还想使用它的多核加速机制的，结果遗憾的是，经测试
在代码逻辑中无法满足条件。

在这次开发与重新设计的过程中，让我深深体会到：好的划分和代码设计可以充分应对需求
变化和性能瓶颈。而好的划分和代码设计离不开重构和重用，但需要指出的是，不要想当然
地过早优化，否则会损耗大量精力于无关痛痒的事情上，同时会拖慢开发进度，影响全局，
导致进度过度延后，从而导致项目过度复杂，最后不堪重负而导致无果而终。我想，软件工
程和系统分析等这些看起来很虚的东西，有时候可以将不可能逐渐变为可能，复杂逐步变为
简单，无头绪乱成一团变得有条理而稳健，并帮助你高效搭建起需求和实现的桥梁，甚至在
需求改变时，之前额零部件也可以很少改动就可以被重用，同时能通过适当组织变可快速满
足新的需求。
