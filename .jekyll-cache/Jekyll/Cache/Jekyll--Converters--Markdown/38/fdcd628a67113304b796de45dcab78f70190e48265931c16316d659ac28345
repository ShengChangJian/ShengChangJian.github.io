I"C`<blockquote>
  <p>本文旨在介绍 vim 的操作技巧，一边最大程度的提高编码效率。</p>
</blockquote>

<ul id="markdown-toc">
  <li><a href="#ubuntu-终端快捷键" id="markdown-toc-ubuntu-终端快捷键">Ubuntu 终端快捷键</a>    <ul>
      <li><a href="#打开终端" id="markdown-toc-打开终端">打开终端</a></li>
      <li><a href="#终端-tab-管理" id="markdown-toc-终端-tab-管理">终端 tab 管理</a></li>
      <li><a href="#编辑" id="markdown-toc-编辑">编辑</a></li>
    </ul>
  </li>
  <li><a href="#vim-高效率操作" id="markdown-toc-vim-高效率操作">vim 高效率操作</a>    <ul>
      <li><a href="#模式" id="markdown-toc-模式">模式</a>        <ul>
          <li><a href="#普通模式" id="markdown-toc-普通模式">普通模式</a>            <ul>
              <li><a href="#修改" id="markdown-toc-修改">修改</a></li>
              <li><a href="#删除" id="markdown-toc-删除">删除</a></li>
              <li><a href="#选择" id="markdown-toc-选择">选择</a></li>
              <li><a href="#复制" id="markdown-toc-复制">复制</a></li>
              <li><a href="#粘贴" id="markdown-toc-粘贴">粘贴</a></li>
              <li><a href="#移动" id="markdown-toc-移动">移动</a></li>
              <li><a href="#查找" id="markdown-toc-查找">查找</a></li>
              <li><a href="#折叠" id="markdown-toc-折叠">折叠</a></li>
              <li><a href="#缩进" id="markdown-toc-缩进">缩进</a></li>
              <li><a href="#撤销或重做" id="markdown-toc-撤销或重做">撤销或重做</a></li>
            </ul>
          </li>
          <li><a href="#v-模式块模式-ctrlv-或-字符模式-v" id="markdown-toc-v-模式块模式-ctrlv-或-字符模式-v">v 模式（块模式 Ctrl+v 或 字符模式 v）</a></li>
          <li><a href="#命令模式esc" id="markdown-toc-命令模式esc">命令模式（Esc+:）</a></li>
          <li><a href="#插入模式esci" id="markdown-toc-插入模式esci">插入模式（Esc+i）</a>            <ul>
              <li><a href="#补全菜单" id="markdown-toc-补全菜单">补全菜单</a></li>
            </ul>
          </li>
          <li><a href="#行选模式shiftv" id="markdown-toc-行选模式shiftv">行选模式（shift+v）</a></li>
        </ul>
      </li>
      <li><a href="#多文件或缓冲区" id="markdown-toc-多文件或缓冲区">多文件或缓冲区</a>        <ul>
          <li><a href="#多缓冲区" id="markdown-toc-多缓冲区">多缓冲区</a></li>
          <li><a href="#多标签页" id="markdown-toc-多标签页">多标签页</a></li>
          <li><a href="#窗格分割" id="markdown-toc-窗格分割">窗格分割</a></li>
          <li><a href="#窗格关闭" id="markdown-toc-窗格关闭">窗格关闭</a></li>
          <li><a href="#调整窗口大小" id="markdown-toc-调整窗口大小">调整窗口大小</a></li>
          <li><a href="#切换和移动窗口" id="markdown-toc-切换和移动窗口">切换和移动窗口</a></li>
        </ul>
      </li>
      <li><a href="#简便操作" id="markdown-toc-简便操作">简便操作</a>        <ul>
          <li><a href="#重复操作" id="markdown-toc-重复操作">重复操作（.）</a></li>
          <li><a href="#数字的增减" id="markdown-toc-数字的增减">数字的增减</a></li>
          <li><a href="#命令配合数字使用" id="markdown-toc-命令配合数字使用">命令配合数字使用</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="ubuntu-终端快捷键">Ubuntu 终端快捷键</h1>

<p>这里我们会给出 Ubuntu 终端常用的快捷键。通常，我们会在终端下使用 vim，掌握这些终端快捷键可以节省多余操作，间接提高 vim 编程效率。</p>

<h2 id="打开终端">打开终端</h2>

<ul>
  <li>用户根目录下打开新的终端：Ctrl+Alt+T</li>
  <li>打开新的终端 tab 页：Ctrl+Shift+T</li>
</ul>

<h2 id="终端-tab-管理">终端 tab 管理</h2>

<ul>
  <li>跳转到指定编号的 tab（1-9）页： Alt + 1、Alt + 2 等</li>
  <li>前一个/后一个 tab 页：ctrl + pageU 或 ctrl + pageDown</li>
  <li>关闭 tab 页：Ctrl+Shift+w</li>
  <li>全屏：F11</li>
  <li>独立屏幕之间切换：Alt+Tab</li>
  <li>左移右移标签页：Shift+Ctrl+PgUp/PgDn</li>
  <li>清除屏幕文字：Ctrl+L</li>
  <li>搜索：Ctrl+Shift+F</li>
  <li>屏幕向上/下滚动：Shift+PgUp/PgDn</li>
  <li>暂停屏幕输出：Ctrl+S</li>
  <li>继续屏幕输出：Ctrl+Q</li>
</ul>

<h2 id="编辑">编辑</h2>

<ul>
  <li>复制：Shift+Ctrl+C</li>
  <li>粘贴：Shift+Ctrl+V</li>
  <li>移动到行首：CTRL + A</li>
  <li>移动到行末：CTRL + E</li>
  <li>在输入历史中搜索：CTRL + R + 文本</li>
  <li>向上显示缓存命令：Ctrl+p</li>
  <li>终止当前任务：Ctrl+C</li>
  <li>把当前任务放到后台运行（相当于运行命令时后面加&amp;）: Ctrl+Z</li>
  <li>显示后台运行的任务: fg</li>
  <li>向下显示缓存命令：Ctrl+n</li>
  <li>删除此处至末尾的所有内容：Ctrl+k</li>
  <li>删除此处至开始的所有内容：Ctrl+u</li>
  <li>删除此处到左边的单词：Ctrl+w</li>
  <li>删除当前字符：Ctrl+d</li>
  <li>删除当前字符前一个字符：Ctrl+h</li>
  <li>向回移动光标：Ctrl+b</li>
  <li>向前移动光标：Ctrl+f</li>
  <li>恢复删除的内容：Ctrl+&amp;</li>
</ul>

<h1 id="vim-高效率操作">vim 高效率操作</h1>

<p>掌握常用的 vim 技巧可以大大减少鼠标的使用，从而使十指保持在主键盘上，减少切换的频率，最终提升编码效率，同时减少精力损耗。</p>

<h2 id="模式">模式</h2>

<h3 id="普通模式">普通模式</h3>

<h4 id="修改">修改</h4>

<ul>
  <li>i： 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。</li>
  <li>I： 在当前行第一个非空字符前插入；</li>
  <li>gI： 在当前行第一列插入；</li>
  <li>a： 在光标后插入；</li>
  <li>A： 在当前行最后插入；</li>
  <li>o： 在下面新建一行插入；</li>
  <li>O： 在上面新建一行插入；</li>
  <li>c[n]w: 改写光标后1(n)个词。</li>
  <li>c[n]l: 改写光标后n个字母。</li>
  <li>c[n]h: 改写光标前n个字母。</li>
  <li>[n]cc: 修改当前[n]行。</li>
  <li>[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。</li>
  <li>[n]S: 删除指定数目的行，并以所输入文本代替之。</li>
  <li>r: 替换光标处的字符，同样支持汉字。</li>
  <li>R: 进入替换模式，按esc回到正常模式。</li>
  <li>~: 反转光标所在字符的大小写</li>
</ul>

<p>注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw</p>

<h4 id="删除">删除</h4>

<ul>
  <li>[n]x: 剪切光标右边n个字符，相当于d[n]l。</li>
  <li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li>
  <li>d: 删除（剪切）在可视模式下选中的文本。</li>
  <li>d$ or D: 删除（剪切）当前位置到行尾的内容。</li>
  <li>d[n]w: 删除（剪切）1(n)个单词（注意，大写W规定以空格分割的词，而小写可以为其他）</li>
  <li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li>
  <li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li>
  <li>d0: 删除（剪切）当前位置到行首的内容</li>
  <li>[n] dd: 删除（剪切）1(n)行。</li>
  <li>:m,nd<cr> 剪切m行到n行的内容。</cr></li>
  <li>d1G或dgg: 剪切光标以上的所有行。</li>
  <li>dG: 剪切光标以下的所有行。</li>
  <li>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li>
  <li>d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。</cr></li>
  <li>dt+定位符：一直删除到该行的定位符处</li>
  <li>Ctrl+r：撤销</li>
  <li>有时候可以把诸如空格替换成制表符，借助 Excel 删除不需要的列</li>
</ul>

<h4 id="选择">选择</h4>

<ul>
  <li>shift+v：行选模式：</li>
  <li>i{：选中光标所在中括号之间所有内容，不包括中括号</li>
  <li>i： 选中分词符（一般为空格，除非特别指明）内的所有内容</li>
  <li>a： 选中包括分词符（一般为空格，除非特别指明）在内的所有内容</li>
  <li>a{：选中光标所在中括号之间所有内容，包括中括号</li>
  <li>ib / i(：选中光标所在小括号之间所有内容，不包括小括号</li>
  <li>ab / a(：选中光标所在小括号之间所有内容，包括小括号</li>
</ul>

<p>以上可以和 y、c、d 等结合实现快速复制、修改、删除功能</p>

<h4 id="复制">复制</h4>

<ul>
  <li>y: 复制在可视模式下选中的文本。</li>
  <li>yy or Y: 复制整行文本。</li>
  <li>y[n]w: 复制一(n)个词。y[n]l: 复制光标右边1(n)个字符。y[n]h: 复制光标左边1(n)个字符。</li>
  <li>y$: 从光标当前位置复制到行尾。</li>
  <li>y0: 从光标当前位置复制到行首。</li>
  <li>:m,ny<cr> 复制m行到n行的内容。</cr></li>
  <li>ygg: 复制光标以上的所有行。</li>
  <li>yG: 复制光标以下的所有行。</li>
  <li>yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。</li>
</ul>

<h4 id="粘贴">粘贴</h4>

<ul>
  <li>p: 在光标之后粘贴。</li>
  <li>P: 在光标之前粘贴。</li>
  <li>“+y: 复制到系统剪切板</li>
  <li>“+p: 从系统剪切板中粘贴，</li>
  <li>命令行或插入模式下 Ctrl+r+寄存器符号 可粘贴相应寄存器中的内容：如可以使用 yiw 复制内容，然后在命令行中使用 Ctrl+r+0 粘贴</li>
</ul>

<h4 id="移动">移动</h4>

<ul>
  <li>ctrl+f： 下翻一屏。</li>
  <li>ctrl+b： 上翻一屏。</li>
  <li>ctrl+d： 下翻半屏。</li>
  <li>ctrl+u： 上翻半屏。</li>
  <li>M： 移动到屏幕的中间行</li>
  <li>H： 移动到屏幕首行</li>
  <li>L： 移动到屏幕的末行</li>
  <li>nH： 移动到屏幕首行下面的第n行</li>
  <li>nL： 移动到屏幕末上上面的第n行</li>
  <li>0nl： 表示先用命令 0 将光标移动到行首，nl 表示执行 n 次向右移动光标操作</li>
  <li>n|： 表示使用 | 命令跳转到当前行的第 n 列</li>
  <li>ta/fa： 移动到光标所之后第一个字符a处</li>
  <li>Ta/Fa： 移动到光标所之前最后一个字符a处</li>
  <li>zz： 将当前行移动到屏幕中央。</li>
  <li>zt： 将当前行移动到屏幕顶端。</li>
  <li>zb： 将当前行移动到屏幕底端。</li>
  <li>gg： 移动到文件首行</li>
  <li>G： 移动到文末</li>
  <li>$: 从光标当前位置到行尾。</li>
  <li>0: 从光标当前位置到行首。</li>
  <li>w: 从光标当前位置到词尾</li>
  <li>gg： 从光标当前位置到页首</li>
  <li>G：  从光标当前位置到页尾</li>
  <li>H：  移动到起始点—-屏幕首行</li>
  <li>M：  移动到屏幕的中间行</li>
  <li>L：  移动到屏幕的末行</li>
  <li>nH： 移动到屏幕首行下面的第n行</li>
  <li>nL： 移动到屏幕末上上面的第n行</li>
  <li>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</li>
  <li>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出 Vim， 重新启动，标记仍然有效。</li>
  <li>‘{a-z}: 移动到标记位置。</li>
  <li>‘{A-Z}: 移动到标记位置。</li>
</ul>

<p>以上可以通过插件简单管理实现。</p>

<ul>
  <li>’‘： 移动到上次修改或编辑的地方</li>
  <li>’.： 移动到最后修改的地方</li>
  <li>Ctrl+i 或 Ctrl+o 或 Ctrl+t：快进或快退</li>
  <li>ta： 移动到所在行之后第一个字符a前一字符</li>
  <li>fa： 移动到所在行之后第一个字符a处</li>
  <li>Ta： 移动到所在行之前最后一个字符a的后一个字符</li>
  <li>Fa： 移动到所在行之前最后一个字符a处</li>
  <li>0nl 或 n|： 跳转到当前行的第 n 列</li>
  <li>Ctrl+o 和 Ctrl+i： 很像浏览器上的 后退 和 前进</li>
  <li>gd: 跳转到局部变量的定义处；</li>
  <li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li>
  <li>g;: 上一个修改过的地方；</li>
  <li>g,: 下一个修改过的地方；</li>
  <li>[[: 跳转到上一个函数块开始，需要有单独一行的{。</li>
  <li>]]: 跳转到下一个函数块开始，需要有单独一行的{。</li>
  <li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li>
  <li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li>
  <li>[{: 跳转到当前块开始处；</li>
  <li>]}: 跳转到当前块结束处；</li>
  <li>[/: 跳转到当前注释块开始处；</li>
  <li>]/: 跳转到当前注释块结束处；</li>
  <li>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</li>
</ul>

<h4 id="查找">查找</h4>

<ul>
  <li>/something: 在后面的文本中查找something。</li>
  <li>?something: 在前面的文本中查找something。</li>
  <li>/pattern/+number: 将光标停在包含pattern的行后面第number行上。</li>
  <li>/pattern/-number: 将光标停在包含pattern的行前面第number行上。</li>
  <li>f(或者F，t，T)： 后面跟需要查找的字符。</li>
  <li>% 可以搜索与之匹配的对应的()[]{}。这个功能对于书写程序特别有用。</li>
  <li>n: 向后查找下一个。</li>
  <li>N: 向前查找下一个。</li>
  <li>*：buffer 内查找当前词</li>
  <li>在搜索命令中，  .*[]^%/?~$这10个字符有着特殊意义，所以在使用这些字符的时候要在前面加上一个反斜杠/。而/e表示&lt;esc&gt;；/t表示&lt;tab&gt;；/r表示&lt;cr&gt;；/b表示&lt;bs&gt;</li>
</ul>

<h4 id="折叠">折叠</h4>

<ul>
  <li>zf – 创建折叠的命令，可以在一个可视区域上使用该命令；</li>
  <li>zf ap – 折叠光标所在的段；</li>
  <li>zf % – 折叠光标配对括号的部分，例如光标在{处，则折叠{}间的部分，对折叠函数很有用；</li>
  <li>zd – 删除当前行的折叠；</li>
  <li>zD – 删除当前行的折叠；</li>
  <li>zo – 打开折叠的文本；</li>
  <li>zc – 收起折叠；</li>
  <li>za – 打开/关闭当前折叠；</li>
  <li>zr – 打开嵌套的折行；</li>
  <li>zm – 收起嵌套的折行；</li>
  <li>zR (zO) – 打开所有折行；</li>
  <li>zM (zC) – 收起所有折行；</li>
  <li>zj – 跳到下一个折叠处；</li>
  <li>zk – 跳到上一个折叠处；</li>
  <li>[z       到当前打开的折叠的开始处。</li>
  <li>]z       到当前打开的折叠的末尾处。</li>
  <li>zi – enable/disable fold;</li>
</ul>

<h4 id="缩进">缩进</h4>

<ul>
  <li>&lt;&lt; 向左缩进一个shiftwidth</li>
  <li>&gt;&gt; 向右缩进一个shiftwidth</li>
  <li>CTRL-T 插入模式下向右缩进</li>
  <li>CTRL-D 插入模式下向左缩进</li>
  <li>J 拼接当前行和下一行</li>
  <li>gJ 同 J ，不过合并后不留空格</li>
</ul>

<h4 id="撤销或重做">撤销或重做</h4>

<ul>
  <li>[n]u: 取消一(n)个改动。</li>
  <li>:undolist – 你的撤销历史。</li>
  <li>ctrl + r: 重做最后的改动。</li>
  <li>g+:	转到较新的文本状态</li>
  <li>U: 取消当前行中所有的改动。</li>
</ul>

<h3 id="v-模式块模式-ctrlv-或-字符模式-v">v 模式（块模式 Ctrl+v 或 字符模式 v）</h3>

<ul>
  <li>i{、（、&lt;、[：选中括号中的所有内容</li>
  <li>iw：选中一个单词</li>
  <li>is：选中一个句子</li>
  <li>ip：选中一个段落</li>
  <li>o	光标移动到选中文本的另一结尾</li>
  <li>O	光标移动到选中文本的另一角落</li>
  <li>U或u：把选中的文本变为大写或小写。</li>
  <li>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。</li>
</ul>

<h3 id="命令模式esc">命令模式（Esc+:）</h3>

<ul>
  <li>:r filename在当前位置插入另一个文件的内容。</li>
  <li>:[n]r filename在第n行插入另一个文件的内容。</li>
  <li>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</li>
  <li>在普通模式下使用 yiw 复制，然后在命令模式下 Ctrl+r 然后输入 0 即可复制文本到 vim 命令行中</li>
  <li>Ctrl-w： 向前删除一个单词。</li>
  <li>Ctrl-h： 向前删除一个字符，等同于Backspace。</li>
  <li>Ctrl-u： 从当前位置移动到命令行开头。</li>
  <li>Ctrl-b： 移动到命令行开头。</li>
  <li>Ctrl-e： 移动到命令行末尾。</li>
  <li>Shift-Left： 左移一个单词。</li>
  <li>Shift-Right： 右移一个单词。</li>
  <li>@： 重复上一次的冒号命令。</li>
  <li>:m,ny&lt;cr&gt; 复制m行到n行的内容。</li>
  <li>:s/old/new - 用new（如果没有/new，则视为删除）替换当前行第一个old。</li>
  <li>:s/old/new/g - 用new替换当前行所有的old。</li>
  <li>:n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。</li>
  <li>:%s/old/new/g - 用new替换文件中所有的old。</li>
  <li>:%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。</li>
  <li>:%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。</li>
  <li>所有替换命令末尾加上c，每个替换都将需要用户确认。</li>
  <li>加上i则忽略大小写</li>
  <li>[range]g/pattern/command：例如 :%g/^ xyz/normal dd</li>
  <li>:pwd 显示vim的工作目录。</li>
  <li>:cd path 改变vim的工作目录。</li>
</ul>

<h3 id="插入模式esci">插入模式（Esc+i）</h3>

<ul>
  <li>Ctrl-h, Ctrl+w, Ctrl-u 具有删除功能</li>
  <li>Ctrl-R {0-9a-z”%#*+:.~=}插入寄存器内容</li>
</ul>

<h4 id="补全菜单">补全菜单</h4>

<ul>
  <li>Ctrl-p 向前切换成员；</li>
  <li>Ctrl-n 向后切换成员；</li>
  <li>Ctrl-e 退出下拉菜单，并退回到原来录入的文字；</li>
  <li>Ctrl-y 退出下拉菜单，并接受当前选项。</li>
</ul>

<h3 id="行选模式shiftv">行选模式（shift+v）</h3>

<ul>
  <li>i{ ：选中光标所在中括号之间所有内容，不包括中括号</li>
  <li>a{ ：选中光标所在中括号之间所有内容，包括中括号</li>
  <li>ib / i(：选中光标所在小括号之间所有内容，不包括小括号</li>
  <li>ab / a(：选中光标所在小括号之间所有内容，包括小括号</li>
</ul>

<h2 id="多文件或缓冲区">多文件或缓冲区</h2>

<h3 id="多缓冲区">多缓冲区</h3>

<ul>
  <li>:buffers或:ls或:files – 显示缓冲区列表。</li>
  <li>ctrl+6：在最近两个缓冲区间切换。</li>
  <li>:bn – 下一个缓冲区。</li>
  <li>:bp – 上一个缓冲区。</li>
  <li>:bl – 最后一个缓冲区。</li>
  <li>:b[n]或:[n]b – 切换到第n个缓冲区。</li>
  <li>:nbw(ipeout) – 彻底删除第n个缓冲区。</li>
  <li>:nbd(elete) – 删除第n个缓冲区，并未真正删除，还在unlisted列表中。</li>
  <li>:ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</li>
  <li>:ls – //列出打开的文件，带编号</li>
</ul>

<h3 id="多标签页">多标签页</h3>

<ul>
  <li>终端中 vim -p files: 打开多个文件，每个文件占用一个标签页。</li>
  <li>:tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。</li>
  <li>^w gf – 在新的标签页里打开光标下路径指定的文件。</li>
  <li>:tabn – 切换到下一个标签。Control + PageDown，也可以。</li>
  <li>:tabp – 切换到上一个标签。Control + PageUp，也可以。</li>
  <li>[n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。</li>
  <li>:tab split – 将当前缓冲区的内容在新页签中打开。</li>
  <li>:tabc[lose] – 关闭当前的标签页。</li>
  <li>:tabo[nly] – 关闭其它的标签页。</li>
  <li>:tabs – 列出所有的标签页和它们包含的窗口。</li>
  <li>:tabm[ove] [N] – 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</li>
  <li>:q、 :close（暂时关闭窗口，其内容还存在缓存中）</li>
  <li>标准模式下：gt（可能被其他插件或映射占用） , gT 可以直接在tab之间切换。更多可以查看帮助 :help table ， help -p</li>
</ul>

<h3 id="窗格分割">窗格分割</h3>

<ul>
  <li>:split(:sp) – 把当前窗水平分割成两个窗口（两个窗口内容一致）。(CTRL-W s 或 CTRL-W CTRL-S) —注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。</li>
  <li>:split filename – 水平分割窗口，并在新窗口中显示另一个文件。</li>
  <li>ctrl+w f –水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。</li>
  <li>C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</li>
  <li>:vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)</li>
</ul>

<h3 id="窗格关闭">窗格关闭</h3>

<ul>
  <li>:qall – 关闭所有窗口，退出vim。</li>
  <li>:wall – 保存所有修改过的窗口。</li>
  <li>:only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)</li>
  <li>:close – 关闭当前窗口，CTRL-W c/q 能实现同样的功能。 (象 :q :x同样工作 )</li>
</ul>

<h3 id="调整窗口大小">调整窗口大小</h3>

<ul>
  <li>ctrl+w + –当前窗口增高一行。也可以用n增高n行。</li>
  <li>ctrl+w - –当前窗口减小一行。也可以用n减小n行。</li>
  <li>ctrl+w _ –当前窗口扩展到尽可能的大。也可以用n设定行数。</li>
  <li>:resize n – 当前窗口n行高。</li>
  <li>ctrl+w = – 所有窗口同样高度。</li>
  <li>n ctrl+w _ – 当前窗口的高度设定为n行。</li>
  <li>ctrl+w &lt; –当前窗口减少一列。也可以用n减少n列。</li>
  <li>ctrl+w &gt; –当前窗口增宽一列。也可以用n增宽n列。</li>
  <li>ctrl+w | –当前窗口尽可能的宽。也可以用n设定列数。</li>
</ul>

<h3 id="切换和移动窗口">切换和移动窗口</h3>

<ul>
  <li>ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。</li>
  <li>ctrl+w p: 切换到前一个窗口。</li>
  <li>ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。</li>
  <li>ctrl+w t(b):切换到最上（下）面的窗口。</li>
  <li>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。</li>
  <li>ctrl+w r：顺时针旋转窗口的位置。</li>
  <li>ctrl+w R：逆时针旋转窗口的位置。</li>
  <li>ctrl+w x：交换同列或同行的窗口的位置</li>
  <li>ctrl+w T: 将当前的窗口移动到新的标签页上。</li>
</ul>

<h2 id="简便操作">简便操作</h2>

<h3 id="重复操作">重复操作（.）</h3>

<p>We saw how the . command can be used to repeat the lasi changed. But the dot command won’t replay changes made
from Vim’s command line. Instead, we can repeat the last Ex command by pressing @:</p>

<h3 id="数字的增减">数字的增减</h3>

<p>在编程中常常会为变量进行编号，通常很多行代码只是变量的编号不一样，而且这些编号一般是递增或递减或有相同间距等，那么我们
就可以使用yyp类似的命令进行复制，然后单独修改数字编号即可。对于修改编号有快速方法：定位到该编号，然后使用”数字+<C-x>"
(比如定位到0px处，nomal下输入180<C-x>(注意<C-x>指的是Ctrl+x)，则0px就变成了-180px);</C-x></C-x></C-x></p>

<h3 id="命令配合数字使用">命令配合数字使用</h3>

<p>vim 大部分命令都可以配合数字使用，但是为了充分利用.和u命令提高效率，建议：Don’t Count if you can repeat!
(因为数字表示重复命令多少次，这数字是多少呢，会增加思考点数时间，同时不易使用u命令)，所以更好的选择是使用
一次命令然后用.重复该命令，这样选择余地更大，使用u命令恢复更有选择性（比如你只需要恢复一个词语，但是你使用
了 d2w 命令删除了 2 个，那么你使用u命令则恢复了2个词语，那么你还得删除一个词语）。</p>
:ET